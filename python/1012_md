# 1012 Learning Python

- [Python Tutorial](https://www.w3schools.com/python/)
- [Python Tutorial](https://www.tutorialspoint.com/python/index.htm)
-[HappyPythonDay](https://github.com/MyFirstSecurity2020/HappyPythonDay)

# 1012:Python Data Type:

-[Basic List Operations](https://www.youtube.com/watch?v=356a48ncGBU)
-[Python - Access List Items](https://www.youtube.com/watch?v=3e-mggtl2IA&feature=youtu.be)
-[Python Lists](https://www.w3schools.com/python/python_lists_access.asp)

-[Access List Items](

List items are indexed and you can access them by referring to the index number:

Note: The first item has index 0.

* Print the second item of the list:


thislist = ["square", "circle", "triangle"]
print(thislist[1])

= Negative Indexing
Negative indexing means start from the end
-1 refers to the last item, -2 refers to the second last item etc.
* Print the last item of the list:


thislist = ["square", "circle", "triangle"]
print(thislist[-1])

Range of Indexes

You can specify a range of indexes by specifying where to start and where to end the range.

When specifying a range, the return value will be a new list with the specified items.

Note: The search will start at index 2 (included) and end at index 5 (not included).

Remember that the first item has index 0.

* Return the third, fourth, and fifth item:


thislist = ["square", "circle", "triangle", "star", "diamond", "rectangle", "octogaon"]
print(thislist[2:5])

#This will return the items from position 2 to 5.

#Remember that the first item is position 0,
#and note that the item in position 5 is NOT included
By leaving out the start value, the range will start at the first item:
* This example returns the items from the beginning to, but NOT including, "blue":


thislist = ["square", "circle", "triangle", "star", "diamond", "rectangle", "octogaon"]
print(thislist[:4])

#This will return the items from index 0 to index 4.

#Remember that index 0 is the first item, and index 4 is the fifth item
#Remember that the item in index 4 is NOT included
By leaving out the end value, the range will go on to the end of the list:
* This example returns the items from "triangle" to the end:


thislist = ["square", "circle", "triangle", "star", "diamond", "rectangle", "octogaon"]
print(thislist[2:])

#This will return the items from index 2 to the end.

#Remember that index 0 is the first item, and index 2 is the third
Range of Negative Indexes
Specify negative indexes if you want to start the search from the end of the list:
* This example returns the items from "orange" (-4) to, but NOT including "octogaon" (-1):


thislist = ["square", "circle", "triangle", "star", "diamond", "rectangle", "octogaon"]
print(thislist[-4:-1])

#Negative indexing means starting from the end of the list.

#This example returns the items from index -4 (included) to index -1 (excluded)

#Remember that the last item has the index -1,
Check if Item Exists
To determine if a specified item is present in a list use the in keyword:
* Check if "apple" is present in the list:


thislist = ["square", "circle", "triangle"]
if "square" in thislist:
  print("Yes, 'square' is in the fruits list")
Python - Change List Items
Change Item Value
To change the value of a specific item, refer to the index number:
* Change the second item:


thislist = ["square", "circle", "triangle"]
thislist[1] = "rectangle"

print(thislist)
Change a Range of Item Values
To change the value of items within a specific range, define a list with the new values, and refer to the range of index numbers where you want to insert the new values:
* Change the values "circle" and "triangle" with the values "rectangle" and "octagon":


thislist = ["square", "circle", "triangle", "star", "diamond", "rectangle", "octogaon"]

thislist[1:3] = ["rectable", "octagon"]

print(thislist)
If you insert more items than you replace, the new items will be inserted where you specified, and the remaining items will move accordingly:
* Change the second value by replacing it with two new values:


thislist = ["square", "circle", "triangle"]

thislist[1:2] = ["rectable", "octagon"]

print(thislist)
Note: The length of the list will change when the number of items inserted does not match the number of items replaced.

if you insert less items than you replace, the new items will be inserted where you specified, and the remaining items will move accordingly:
* Change the second and third value by replacing it with one value:


thislist = ["square", "circle", "triangle"]
thislist[1:3] = ["octagon"]

print(thislist)
Insert Items
To insert a new list item, without replacing any of the existing values, we can use the insert() method.
The insert() method inserts an item at the specified index:
* Insert "watermelon" as the third item:


thislist = ["square", "circle", "triangle"]

thislist.insert(2, "rectangle")

print(thislist) 
Note: As a result of the example above, the list will now contain 4 items.

Python - Add List Items
Append Items
To add an item to the end of the list, use the append() method:
* Using the append() method to append an item:


thislist = ["square", "circle", "triangle""]

thislist.append("star")

print(thislist)
Insert Items
To insert a list item at a specified index, use the insert() method.
The insert() method inserts an item at the specified index:
Note: As a result of the examples above, the lists will now contain 4 items.
* Insert an item as the second position:


thislist = ["square", "circle", "triangle"]
thislist.insert(1, "star")
print(thislist)
Extend List
To append elements from another list to the current list, use the extend() method.
* Add the elements of shapes to thislist:


thislist = ["square", "circle", "triangle""]
colors = ["star", "diamond", "rectangle"]
thislist.extend(shapes)
print(thislist)


(The elements will be added to the end of the list)
Add Any Iterable
The extend() method does not have to append lists, you can add any iterable object (tuples, sets, dictionaries etc.).
* Add elements of a shapes to a list:


thislist = ["square", "circle", "triangle"]
thistuple = ("redctangle,octagon"]
thislist.extend(thistuple)
print(thislist)
Python - Remove List Items
Remove Specified Item
* Remove "circle":


thislist = ["square", "circle", "triangle"]
thislist.remove("circle")
print(thislist)
Remove Specified Index
The pop() method removes the specified index.
* Remove the second item:


thislist = ["square", "circle", "triangle"]
thislist.pop(1)
print(thislist)
If you do not specify the index, the pop() method removes the last item.
* Remove the last item:


thislist = ["square", "circle", "triangle"]
thislist.pop()
print(thislist)
The del keyword also removes the specified index:
* Remove the first item:


thislist = ["square", "circle", "triangle]
del thislist[0]
print(thislist)
The del keyword can also delete the list completely.
* Delete the entire list:


thislist = ["square", "circle", "triangle]
del thislist
Clear the List
The clear() method empties the list.
The list still remains, but it has no content.
* Clear the list content:


thislist = ["square", "circle", "triangle"]
thislist.clear()
print(thislist)
Python - Sort Lists
Advanced Operations in Python Lists
Sort List Alphanumerically
List objects have a sort() method that will sort the list alphanumerically, ascending, by default:
* Sort the list alphabetically:


thislist = ["square", "circle", "triangle, "star", "diamond"]
thislist.sort()
print(thislist)
* Sort the list numerically:


thislist = [109, 59, 69, 89, 29]
thislist.sort()
print(thislist)
Sort Descending
To sort descending, use the keyword argument reverse = True:
* Sort the list descending:


thislist = ["square", "circle", "triangle, "star", "diamond"]
thislist.sort(reverse = True)
print(thislist)
* Sort the list descending:


thislist = [109, 59, 69, 89, 29]
thislist.sort(reverse = True)
print(thislist)
Customize Sort Function
You can also customize your own function by using the keyword argument key = function.
The function will return a number that will be used to sort the list (the lowest number first):
* Sort the list based on how close the number is to 50:


def myfunc(n):
  return abs(n - 50)

thislist = [109, 59, 69, 89, 29]

thislist.sort(key = myfunc)

print(thislist)
Case Insensitive Sort
By default the sort() method is case sensitive, resulting in all capital letters being sorted before lower case letters:
* Case sensitive sorting can give an unexpected result:


thislist = ["square", "circle", "triangle, "star"]
thislist.sort()
print(thislist)
Luckily we can use built-in functions as key functions when sorting a list.
So if you want a case-insensitive sort function, use str.lower as a key function:
* Perform a case-insensitive sort of the list:


thislist = ["square", "circle", "triangle, "star"]
thislist.sort(key = str.lower)
print(thislist)
Reverse Order
What if you want to reverse the order of a list, regardless of the alphabet?
The reverse() method reverses the current sorting order of the elements.
* Reverse the order of the list items:


thislist = [square", "circle", "triangle, "star"]
thislist.reverse()
print(thislist)
Python - Copy Lists
Copy a List

You cannot copy a list simply by typing list2 = list1, because: list2 will only be a reference to list1, and changes made in list1 will automatically also be made in list2.

There are ways to make a copy, one way is to use the built-in List method copy().

* Make a copy of a list with the copy() method:


thislist = ["square", "circle", "triangle"]
mylist = thislist.copy()
print(mylist)
Another way to make a copy is to use the built-in method list().

* Make a copy of a list with the list() method:


thislist = ["square", "circle", "triangle"]
mylist = list(thislist)
print(mylist)
Another way to make a copy is to use the built-in method list().

Python - Join Lists
Join Two Lists
There are several ways to join, or concatenate, two or more lists in Python.
One of the easiest ways are by using the + operator.
* Join two list:


list1 = ["q", "w", "e"]
list2 = [3, 6, 9]

list3 = list1 + list2
print(list3)
Another way to join two lists is by appending all the items from list2 into list1, one by one:

* Append list2 into list1:


list1 = ["q", "w", "e"]
list2 = [3, 6, 9]

for x in list2:
  list1.append(x)

print(list1)
Or you can use the extend() method, which purpose is to add elements from one list to another list:

* Use the extend() method to add list2 at the end of list1:


list1 = ["q", "w", "e"]
list2 = [1, 2, 3]

list1.extend(list2)
print(list1)
Python - List Methods
List Methods
Python List reverse() Method
* Reverse the order of the colors list:


shapess = ["square", "circle", "triangle"]

shapess.reverse()

print(shapes)
Definition and Usage
- The reverse() method reverses the sorting order of the elements.
Syntax
- list.reverse()
Parameter Values
- No parameters
Related Pages
- The buil-in function reversed() returns a reversed iterator object.
Official The Python Tutorial » 5. Data Structures
list.count(x)Method:Return the number of times x appears in the list.
